name: Deploy Cat Roulette

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Validate HTML
        uses: Cyb3r-Jak3/html5validator-action@v7.2.0
        with:
          root: ./
          css: true

      - name: Install dependencies for linting
        run: |
          npm init -y
          npm install --save-dev eslint stylelint stylelint-config-standard

      - name: Optimize images
        run: |
          # Create optimized directory
          mkdir -p optimized/images

          # Copy and optimize images (basic optimization)
          for img in images/*.{jpg,jpeg,png,svg}; do
            if [ -f "$img" ]; then
              cp "$img" "optimized/$img"
            fi
          done

          # Copy other files
          cp *.html *.css *.js optimized/

          # Copy deployment monitoring script
          cp deployment-status.js optimized/

          # Create health check endpoint
          cat > optimized/health.json << EOF
          {
            "status": "healthy",
            "service": "cat-roulette",
            "timestamp": "$(date -u -Iseconds)",
            "version": "$(date +%Y%m%d-%H%M%S)"
          }
          EOF

      - name: Create deployment metadata
        run: |
          # Create deployment metadata file
          cat > optimized/deployment-info.json << EOF
          {
            "deployment_time": "$(date -u -Iseconds)",
            "commit_sha": "${{ github.sha }}",
            "commit_message": "${{ github.event.head_commit.message }}",
            "branch": "${{ github.ref_name }}",
            "workflow_run_id": "${{ github.run_id }}",
            "workflow_url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
            "repository": "${{ github.repository }}",
            "version": "$(date +%Y%m%d-%H%M%S)"
          }
          EOF

          echo "📋 Deployment metadata created"

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./optimized

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Comprehensive deployment verification
        id: verify-deployment
        run: |
          echo "🔍 Starting comprehensive deployment verification..."
          DEPLOYMENT_URL="${{ steps.deployment.outputs.page_url }}"
          echo "Deployment URL: $DEPLOYMENT_URL"

          # Wait for deployment to be fully ready
          echo "⏳ Waiting for deployment to be ready..."
          sleep 45

          # Initialize verification results
          VERIFICATION_PASSED=true

          # Test 1: Basic HTTP response
          echo "🌐 Testing HTTP response..."
          response=$(curl -s -o /dev/null -w "%{http_code}" "$DEPLOYMENT_URL" || echo "000")
          if [ "$response" = "200" ]; then
            echo "✅ HTTP response test passed (200 OK)"
          else
            echo "❌ HTTP response test failed (HTTP $response)"
            VERIFICATION_PASSED=false
          fi

          # Test 2: Content verification
          echo "📄 Testing page content..."
          content=$(curl -s "$DEPLOYMENT_URL" || echo "")
          if echo "$content" | grep -q "Cat Roulette"; then
            echo "✅ Content verification passed (title found)"
          else
            echo "❌ Content verification failed (title not found)"
            VERIFICATION_PASSED=false
          fi

          # Test 3: Critical assets verification
          echo "🎨 Testing critical assets..."

          # Test 4: Functional smoke test
          echo "🔧 Testing JavaScript functionality..."
          if echo "$content" | grep -q "spinButton"; then
            echo "✅ Functional elements test passed (spin button found)"
          else
            echo "❌ Functional elements test failed (spin button not found)"
            VERIFICATION_PASSED=false
          fi

          # Test 5: Cat images availability
          echo "🐱 Testing cat images..."
          cat_image_found=false
          for i in {1..8}; do
            img_response=$(curl -s -o /dev/null -w "%{http_code}" "${DEPLOYMENT_URL}images/cat${i}.svg" || echo "000")
            if [ "$img_response" = "200" ]; then
              cat_image_found=true
              break
            fi
          done

          if [ "$cat_image_found" = true ]; then
            echo "✅ Cat images test passed (at least one image accessible)"
          else
            echo "❌ Cat images test failed (no images accessible)"
            VERIFICATION_PASSED=false
          fi

          # Test 6: Health endpoint verification
          echo "🏥 Testing health endpoint..."
          health_response=$(curl -s -o /dev/null -w "%{http_code}" "${DEPLOYMENT_URL}health.json" || echo "000")
          if [ "$health_response" = "200" ]; then
            health_content=$(curl -s "${DEPLOYMENT_URL}health.json" || echo "{}")
            if echo "$health_content" | grep -q '"status":"healthy"'; then
              echo "✅ Health endpoint test passed"
            else
              echo "❌ Health endpoint test failed (invalid content)"
              VERIFICATION_PASSED=false
            fi
          else
            echo "❌ Health endpoint test failed (HTTP $health_response)"
            VERIFICATION_PASSED=false
          fi

          # Final verification result
          if [ "$VERIFICATION_PASSED" = true ]; then
            echo "🎉 All deployment verification tests passed!"
            echo "verification_status=success" >> $GITHUB_OUTPUT
          else
            echo "💥 Deployment verification failed!"
            echo "verification_status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Rollback on verification failure
        if: failure() && steps.verify-deployment.outputs.verification_status == 'failed'
        run: |
          echo "🔄 Deployment verification failed - initiating rollback procedures..."
          echo "⚠️  Current deployment has critical issues and should not be used"
          echo "📋 Rollback actions:"
          echo "   1. Previous GitHub Pages deployment remains active"
          echo "   2. Failed deployment artifacts are not promoted"
          echo "   3. Development team will be notified"
          echo "🔍 Check the verification logs above for specific failure details"

          # Set rollback status for notifications
          echo "ROLLBACK_TRIGGERED=true" >> $GITHUB_ENV

      - name: Send failure notification
        if: failure()
        run: |
          echo "📧 Sending failure notification..."
          echo "🚨 DEPLOYMENT FAILURE ALERT 🚨"
          echo "Repository: ${{ github.repository }}"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Workflow: ${{ github.workflow }}"
          echo "Run ID: ${{ github.run_id }}"
          echo "Failure Time: $(date -u)"

          if [ "${ROLLBACK_TRIGGERED:-false}" = "true" ]; then
            echo "Status: Deployment failed verification - rollback triggered"
            echo "Action: Previous version remains active"
          else
            echo "Status: Build or deployment process failed"
            echo "Action: No changes deployed"
          fi

          echo "🔗 View details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

      - name: Update deployment status
        if: always()
        run: |
          echo "📊 Final deployment status update..."

          if [ "${{ job.status }}" = "success" ]; then
            echo "🚀 SUCCESS: Cat Roulette deployed and verified successfully!"
            echo "🌐 Live URL: ${{ steps.deployment.outputs.page_url }}"
            echo "✅ All verification tests passed"
            echo "📈 Deployment metrics:"
            echo "   - Build completed in workflow"
            echo "   - Assets optimized and validated"
            echo "   - Smoke tests passed"
            echo "   - Site is fully functional"
          else
            echo "💥 FAILURE: Deployment process failed"
            if [ "${ROLLBACK_TRIGGERED:-false}" = "true" ]; then
              echo "🔄 Rollback triggered - previous version remains active"
            else
              echo "🛑 Build failed - no changes deployed"
            fi
            echo "🔍 Check logs above for detailed error information"
            echo "📞 Development team should investigate immediately"
          fi

          echo "⏰ Workflow completed at: $(date -u)"
